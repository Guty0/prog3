import java.util.Arrays;
import java.util.Scanner;

public class Ordenamientos {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Ingrese el tamaño del arreglo: ");
        int size = scanner.nextInt();

        double[] arr = new double[size];

        System.out.println("Ingrese los elementos del arreglo:");
        for (int i = 0; i < size; i++) {
            arr[i] = scanner.nextDouble();
        }

        scanner.close();

        double[] arrBubble = Arrays.copyOf(arr, arr.length);
        double[] arrInsertion = Arrays.copyOf(arr, arr.length);
        double[] arrSelection = Arrays.copyOf(arr, arr.length);
        double[] arrMerge = Arrays.copyOf(arr, arr.length);

        long startTime = System.nanoTime();
        bubbleSort(arrBubble);
        long bubbleTime = System.nanoTime() - startTime;

        startTime = System.nanoTime();
        insertionSort(arrInsertion);
        long insertionTime = System.nanoTime() - startTime;

        startTime = System.nanoTime();
        selectionSort(arrSelection);
        long selectionTime = System.nanoTime() - startTime;

        startTime = System.nanoTime();
        mergeSort(arrMerge);
        long mergeTime = System.nanoTime() - startTime;

        System.out.println("Tamaño del arreglo: " + size);
        System.out.println("Bubble Sort: " + bubbleTime + " nanosegundos");
        System.out.println("Insertion Sort: " + insertionTime + " nanosegundos");
        System.out.println("Selection Sort: " + selectionTime + " nanosegundos");
        System.out.println("Merge Sort: " + mergeTime + " nanosegundos");
    }

    public static void bubbleSort(double[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    double temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void insertionSort(double[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            double key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void selectionSort(double[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            double temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    public static void mergeSort(double[] arr) {
        if (arr.length <= 1) {
            return;
        }

        int mid = arr.length / 2;
        double[] left = Arrays.copyOfRange(arr, 0, mid);
        double[] right = Arrays.copyOfRange(arr, mid, arr.length);

        mergeSort(left);
        mergeSort(right);

        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] < right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        while (i < left.length) {
            arr[k++] = left[i++];
        }

        while (j < right.length) {
            arr[k++] = right[j++];
        }
    }
}
